{"name": "test_findtutor", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='root']/div/div[2]/div[2]/div[1]/div/div/div[1]/div/div/div[2]/div[2]/input\"}\n  (Session info: chrome=98.0.4758.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00FAFDC3+2555331]\n\tOrdinal0 [0x00F477F1+2127857]\n\tOrdinal0 [0x00E42E08+1060360]\n\tOrdinal0 [0x00E6E49E+1238174]\n\tOrdinal0 [0x00E6E69B+1238683]\n\tOrdinal0 [0x00E99252+1413714]\n\tOrdinal0 [0x00E87B54+1342292]\n\tOrdinal0 [0x00E975FA+1406458]\n\tOrdinal0 [0x00E87976+1341814]\n\tOrdinal0 [0x00E636B6+1193654]\n\tOrdinal0 [0x00E64546+1197382]\n\tGetHandleVerifier [0x01149622+1619522]\n\tGetHandleVerifier [0x011F882C+2336844]\n\tGetHandleVerifier [0x010423E1+541697]\n\tGetHandleVerifier [0x01041443+537699]\n\tOrdinal0 [0x00F4D18E+2150798]\n\tOrdinal0 [0x00F51518+2168088]\n\tOrdinal0 [0x00F51660+2168416]\n\tOrdinal0 [0x00F5B330+2208560]\n\tBaseThreadInitThunk [0x76056739+25]\n\tRtlGetFullPathName_UEx [0x774F8E7F+1215]\n\tRtlGetFullPathName_UEx [0x774F8E4D+1165]", "trace": "self = <testCases.test_find_tutor.Test_006_FindTutor object at 0x000002B86AF6B3D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1645e6d91cef8f183162daacdba800b2\")>\n\n    @pytest.mark.sanity\n    def test_findtutor(self,setup):\n        self.logger.info(\"************* Test_006_FindTutor **********\")\n        self.driver=setup\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n    \n        self.lp = LoginPage(self.driver)\n        self.lp.setUserName(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        self.logger.info(\"************* Login successful **********\")\n    \n        self.logger.info(\"******* Starting Find Tutor Test **********\")\n        self.findtutor = FindTutor(self.driver)\n        time.sleep(5)\n        self.findtutor.clickOnFindTutorMenu() # Click on Menu Item\n        time.sleep(4)\n    \n        self.logger.info(\"************* Search Tutorpark**********\")\n    \n>       searched_value = self.findtutor.setSearchbox(\"viraj\")\n\ntestCases\\test_find_tutor.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\FindTutorPage.py:25: in setSearchbox\n    self.driver.find_element_by_xpath(self.txtFind_xpath).clear()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:520: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B86AF6B430>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x76056739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x774F8E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x774F8E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='root']/div/div[2]/div[2]/div[1]/div/div/div[1]/div/div/div[2]/div[2]/input\"}\nE         (Session info: chrome=98.0.4758.102)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00FAFDC3+2555331]\nE       \tOrdinal0 [0x00F477F1+2127857]\nE       \tOrdinal0 [0x00E42E08+1060360]\nE       \tOrdinal0 [0x00E6E49E+1238174]\nE       \tOrdinal0 [0x00E6E69B+1238683]\nE       \tOrdinal0 [0x00E99252+1413714]\nE       \tOrdinal0 [0x00E87B54+1342292]\nE       \tOrdinal0 [0x00E975FA+1406458]\nE       \tOrdinal0 [0x00E87976+1341814]\nE       \tOrdinal0 [0x00E636B6+1193654]\nE       \tOrdinal0 [0x00E64546+1197382]\nE       \tGetHandleVerifier [0x01149622+1619522]\nE       \tGetHandleVerifier [0x011F882C+2336844]\nE       \tGetHandleVerifier [0x010423E1+541697]\nE       \tGetHandleVerifier [0x01041443+537699]\nE       \tOrdinal0 [0x00F4D18E+2150798]\nE       \tOrdinal0 [0x00F51518+2168088]\nE       \tOrdinal0 [0x00F51660+2168416]\nE       \tOrdinal0 [0x00F5B330+2208560]\nE       \tBaseThreadInitThunk [0x76056739+25]\nE       \tRtlGetFullPathName_UEx [0x774F8E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x774F8E4D+1165]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException"}, "attachments": [{"name": "log", "source": "3d74a7f4-cd13-41a3-8722-3336dd278158-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d2fde7bc-be6e-427a-a54c-02f7d82c47ca-attachment.txt", "type": "text/plain"}], "start": 1645518444856, "stop": 1645518457739, "uuid": "aba175c7-c05b-4e4d-99ac-f29e06270288", "historyId": "d751868a996f55737c6be11cf43a2eba", "testCaseId": "d690655e226a3671fac41dc659983b15", "fullName": "testCases.test_find_tutor.Test_006_FindTutor#test_findtutor", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_find_tutor"}, {"name": "subSuite", "value": "Test_006_FindTutor"}, {"name": "host", "value": "PC-24"}, {"name": "thread", "value": "18264-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_find_tutor"}]}