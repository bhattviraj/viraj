{"name": "test_addTodo_ddt", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"To do\"}\n  (Session info: chrome=99.0.4844.82)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00A3CF43+2608963]\n\tOrdinal0 [0x009CE8C1+2156737]\n\tOrdinal0 [0x008C42C8+1065672]\n\tOrdinal0 [0x008F0A54+1247828]\n\tOrdinal0 [0x008F0C4B+1248331]\n\tOrdinal0 [0x0091D192+1429906]\n\tOrdinal0 [0x0090B104+1356036]\n\tOrdinal0 [0x0091B58A+1422730]\n\tOrdinal0 [0x0090AED6+1355478]\n\tOrdinal0 [0x008E5D86+1203590]\n\tOrdinal0 [0x008E6C66+1207398]\n\tGetHandleVerifier [0x00BE3252+1679186]\n\tGetHandleVerifier [0x00C9591C+2410012]\n\tGetHandleVerifier [0x00AD3B41+567361]\n\tGetHandleVerifier [0x00AD2CC6+563654]\n\tOrdinal0 [0x009D4B5B+2181979]\n\tOrdinal0 [0x009D9AA8+2202280]\n\tOrdinal0 [0x009D9B95+2202517]\n\tOrdinal0 [0x009E3B2C+2243372]\n\tBaseThreadInitThunk [0x75996739+25]\n\tRtlGetFullPathName_UEx [0x77358E7F+1215]\n\tRtlGetFullPathName_UEx [0x77358E4D+1165]", "trace": "self = <testCases.test_03todo.Test_003_DDT_AddTodo object at 0x0000013743417FD0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5691c59bbc1df7217ea392dc3689540\")>\n\n    @pytest.mark.sanity\n    def test_addTodo_ddt(self, setup):\n        self.logger.info(\"************* Test_003_AddTodo **********\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n    \n        self.lp = LoginPage(self.driver)\n        self.lp.setUserName(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        time.sleep(5)\n        self.logger.info(\"************* Login Successful **********\")\n    \n        self.logger.info(\"******* Starting Add Todo Test **********\")\n        self.todo = AddTodo(self.driver)\n    \n>       self.todo.clickOnTodoMenu()  # Click on Menu Item\n\ntestCases\\test_03todo.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\AddTodoPage.py:19: in clickOnTodoMenu\n    self.driver.find_element(By.LINK_TEXT, self.lnkTodo_menu_name).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001374345AE60>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x75996739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77358E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77358E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"To do\"}\nE         (Session info: chrome=99.0.4844.82)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00A3CF43+2608963]\nE       \tOrdinal0 [0x009CE8C1+2156737]\nE       \tOrdinal0 [0x008C42C8+1065672]\nE       \tOrdinal0 [0x008F0A54+1247828]\nE       \tOrdinal0 [0x008F0C4B+1248331]\nE       \tOrdinal0 [0x0091D192+1429906]\nE       \tOrdinal0 [0x0090B104+1356036]\nE       \tOrdinal0 [0x0091B58A+1422730]\nE       \tOrdinal0 [0x0090AED6+1355478]\nE       \tOrdinal0 [0x008E5D86+1203590]\nE       \tOrdinal0 [0x008E6C66+1207398]\nE       \tGetHandleVerifier [0x00BE3252+1679186]\nE       \tGetHandleVerifier [0x00C9591C+2410012]\nE       \tGetHandleVerifier [0x00AD3B41+567361]\nE       \tGetHandleVerifier [0x00AD2CC6+563654]\nE       \tOrdinal0 [0x009D4B5B+2181979]\nE       \tOrdinal0 [0x009D9AA8+2202280]\nE       \tOrdinal0 [0x009D9B95+2202517]\nE       \tOrdinal0 [0x009E3B2C+2243372]\nE       \tBaseThreadInitThunk [0x75996739+25]\nE       \tRtlGetFullPathName_UEx [0x77358E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x77358E4D+1165]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException"}, "attachments": [{"name": "log", "source": "8a878216-6a51-4685-b5bc-2e82011ed82a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "ccbe46e4-1872-4cb3-bbbc-2ca7612b1546-attachment.txt", "type": "text/plain"}], "start": 1648013380176, "stop": 1648013388122, "uuid": "25dcac9a-54f9-446f-a79e-8a908f906bdd", "historyId": "97ef583587c19381c93c0d417a73c35d", "testCaseId": "ba324fffa49355d09a60cc62e1fa0999", "fullName": "testCases.test_03todo.Test_003_DDT_AddTodo#test_addTodo_ddt", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_03todo"}, {"name": "subSuite", "value": "Test_003_DDT_AddTodo"}, {"name": "host", "value": "PC-24"}, {"name": "thread", "value": "5304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_03todo"}]}